/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestEthSender, TestEthSenderInterface } from "../TestEthSender";

const _abi = [
  {
    inputs: [
      {
        internalType: "address payable",
        name: "to",
        type: "address",
      },
    ],
    name: "sendEth",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610146806100206000396000f3fe60806040526004361061001e5760003560e01c806376a54c6014610023575b600080fd5b61003d6004803603810190610038919061009e565b61003f565b005b8073ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610085573d6000803e3d6000fd5b5050565b600081359050610098816100f9565b92915050565b6000602082840312156100b057600080fd5b60006100be84828501610089565b91505092915050565b60006100d2826100d9565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b610102816100c7565b811461010d57600080fd5b5056fea26469706673582212209163318452c3d5468de6fa09a9f443227081a1d9c79883d22e5d1a8f91e3ff5a64736f6c63430008000033";

export class TestEthSender__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestEthSender> {
    return super.deploy(overrides || {}) as Promise<TestEthSender>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestEthSender {
    return super.attach(address) as TestEthSender;
  }
  connect(signer: Signer): TestEthSender__factory {
    return super.connect(signer) as TestEthSender__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestEthSenderInterface {
    return new utils.Interface(_abi) as TestEthSenderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestEthSender {
    return new Contract(address, _abi, signerOrProvider) as TestEthSender;
  }
}
