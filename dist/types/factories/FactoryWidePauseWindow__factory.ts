/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  FactoryWidePauseWindow,
  FactoryWidePauseWindowInterface,
} from "../FactoryWidePauseWindow";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "getPauseConfiguration",
    outputs: [
      {
        internalType: "uint256",
        name: "pauseWindowDuration",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "bufferPeriodDuration",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b506276a70042016080818152505060805161012661003b6000398060525280607a52506101266000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80632da47c4014602d575b600080fd5b60336048565b604051603f92919060c1565b60405180910390f35b60008060004290507f000000000000000000000000000000000000000000000000000000000000000081101560a657807f000000000000000000000000000000000000000000000000000000000000000003925062278d00915060af565b60009250600091505b509091565b60bb8160e6565b82525050565b600060408201905060d4600083018560b4565b60df602083018460b4565b9392505050565b600081905091905056fea26469706673582212203b94ca521c709c943404c66457d26162db8a72e1a8068c068df81250d7794d7f64736f6c63430007010033";

type FactoryWidePauseWindowConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FactoryWidePauseWindowConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FactoryWidePauseWindow__factory extends ContractFactory {
  constructor(...args: FactoryWidePauseWindowConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FactoryWidePauseWindow> {
    return super.deploy(overrides || {}) as Promise<FactoryWidePauseWindow>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): FactoryWidePauseWindow {
    return super.attach(address) as FactoryWidePauseWindow;
  }
  connect(signer: Signer): FactoryWidePauseWindow__factory {
    return super.connect(signer) as FactoryWidePauseWindow__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FactoryWidePauseWindowInterface {
    return new utils.Interface(_abi) as FactoryWidePauseWindowInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FactoryWidePauseWindow {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as FactoryWidePauseWindow;
  }
}
