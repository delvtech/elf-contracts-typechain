/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ZapCurveTokenToPrincipalTokenInterface
  extends ethers.utils.Interface {
  functions: {
    "authorize(address)": FunctionFragment;
    "authorized(address)": FunctionFragment;
    "deauthorize(address)": FunctionFragment;
    "isAuthorized(address)": FunctionFragment;
    "isFrozen()": FunctionFragment;
    "owner()": FunctionFragment;
    "setApprovalsFor(address[],address[],uint256[])": FunctionFragment;
    "setIsFrozen(bool)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "zapIn((bytes32,address,address,uint256,uint256,bool),(address,address,uint256[],address[],uint256,bytes4,uint256),(address,address,uint256[],address[],uint256,bytes4,uint256),tuple[])": FunctionFragment;
    "zapOut((bytes32,address,uint256,address,uint256,uint256,uint256,bool),(address,address,int128,address,bytes4),(address,address,int128,address,bytes4),tuple[])": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "authorize", values: [string]): string;
  encodeFunctionData(functionFragment: "authorized", values: [string]): string;
  encodeFunctionData(functionFragment: "deauthorize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isAuthorized",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isFrozen", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setApprovalsFor",
    values: [string[], string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsFrozen",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "zapIn",
    values: [
      {
        balancerPoolId: BytesLike;
        recipient: string;
        principalToken: string;
        minPtAmount: BigNumberish;
        deadline: BigNumberish;
        needsChildZap: boolean;
      },
      {
        curvePool: string;
        lpToken: string;
        amounts: BigNumberish[];
        roots: string[];
        parentIdx: BigNumberish;
        funcSig: BytesLike;
        minLpAmount: BigNumberish;
      },
      {
        curvePool: string;
        lpToken: string;
        amounts: BigNumberish[];
        roots: string[];
        parentIdx: BigNumberish;
        funcSig: BytesLike;
        minLpAmount: BigNumberish;
      },
      {
        tokenContract: string;
        spender: string;
        amount: BigNumberish;
        expiration: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        v: BigNumberish;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "zapOut",
    values: [
      {
        balancerPoolId: BytesLike;
        principalToken: string;
        principalTokenAmount: BigNumberish;
        recipient: string;
        minBaseTokenAmount: BigNumberish;
        minRootTokenAmount: BigNumberish;
        deadline: BigNumberish;
        targetNeedsChildZap: boolean;
      },
      {
        curvePool: string;
        lpToken: string;
        rootTokenIdx: BigNumberish;
        rootToken: string;
        funcSig: BytesLike;
      },
      {
        curvePool: string;
        lpToken: string;
        rootTokenIdx: BigNumberish;
        rootToken: string;
        funcSig: BytesLike;
      },
      {
        tokenContract: string;
        spender: string;
        amount: BigNumberish;
        expiration: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        v: BigNumberish;
      }[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "authorize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "authorized", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deauthorize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isFrozen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalsFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsFrozen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zapIn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zapOut", data: BytesLike): Result;

  events: {};
}

export class ZapCurveTokenToPrincipalToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ZapCurveTokenToPrincipalTokenInterface;

  functions: {
    authorize(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    authorized(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    deauthorize(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAuthorized(who: string, overrides?: CallOverrides): Promise<[boolean]>;

    isFrozen(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setApprovalsFor(
      tokens: string[],
      spenders: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIsFrozen(
      _newState: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    zapIn(
      _info: {
        balancerPoolId: BytesLike;
        recipient: string;
        principalToken: string;
        minPtAmount: BigNumberish;
        deadline: BigNumberish;
        needsChildZap: boolean;
      },
      _zap: {
        curvePool: string;
        lpToken: string;
        amounts: BigNumberish[];
        roots: string[];
        parentIdx: BigNumberish;
        funcSig: BytesLike;
        minLpAmount: BigNumberish;
      },
      _childZap: {
        curvePool: string;
        lpToken: string;
        amounts: BigNumberish[];
        roots: string[];
        parentIdx: BigNumberish;
        funcSig: BytesLike;
        minLpAmount: BigNumberish;
      },
      _permitData: {
        tokenContract: string;
        spender: string;
        amount: BigNumberish;
        expiration: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        v: BigNumberish;
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    zapOut(
      _info: {
        balancerPoolId: BytesLike;
        principalToken: string;
        principalTokenAmount: BigNumberish;
        recipient: string;
        minBaseTokenAmount: BigNumberish;
        minRootTokenAmount: BigNumberish;
        deadline: BigNumberish;
        targetNeedsChildZap: boolean;
      },
      _zap: {
        curvePool: string;
        lpToken: string;
        rootTokenIdx: BigNumberish;
        rootToken: string;
        funcSig: BytesLike;
      },
      _childZap: {
        curvePool: string;
        lpToken: string;
        rootTokenIdx: BigNumberish;
        rootToken: string;
        funcSig: BytesLike;
      },
      _permitData: {
        tokenContract: string;
        spender: string;
        amount: BigNumberish;
        expiration: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        v: BigNumberish;
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  authorize(
    who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  authorized(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  deauthorize(
    who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAuthorized(who: string, overrides?: CallOverrides): Promise<boolean>;

  isFrozen(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  setApprovalsFor(
    tokens: string[],
    spenders: string[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIsFrozen(
    _newState: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  zapIn(
    _info: {
      balancerPoolId: BytesLike;
      recipient: string;
      principalToken: string;
      minPtAmount: BigNumberish;
      deadline: BigNumberish;
      needsChildZap: boolean;
    },
    _zap: {
      curvePool: string;
      lpToken: string;
      amounts: BigNumberish[];
      roots: string[];
      parentIdx: BigNumberish;
      funcSig: BytesLike;
      minLpAmount: BigNumberish;
    },
    _childZap: {
      curvePool: string;
      lpToken: string;
      amounts: BigNumberish[];
      roots: string[];
      parentIdx: BigNumberish;
      funcSig: BytesLike;
      minLpAmount: BigNumberish;
    },
    _permitData: {
      tokenContract: string;
      spender: string;
      amount: BigNumberish;
      expiration: BigNumberish;
      r: BytesLike;
      s: BytesLike;
      v: BigNumberish;
    }[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  zapOut(
    _info: {
      balancerPoolId: BytesLike;
      principalToken: string;
      principalTokenAmount: BigNumberish;
      recipient: string;
      minBaseTokenAmount: BigNumberish;
      minRootTokenAmount: BigNumberish;
      deadline: BigNumberish;
      targetNeedsChildZap: boolean;
    },
    _zap: {
      curvePool: string;
      lpToken: string;
      rootTokenIdx: BigNumberish;
      rootToken: string;
      funcSig: BytesLike;
    },
    _childZap: {
      curvePool: string;
      lpToken: string;
      rootTokenIdx: BigNumberish;
      rootToken: string;
      funcSig: BytesLike;
    },
    _permitData: {
      tokenContract: string;
      spender: string;
      amount: BigNumberish;
      expiration: BigNumberish;
      r: BytesLike;
      s: BytesLike;
      v: BigNumberish;
    }[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    authorize(who: string, overrides?: CallOverrides): Promise<void>;

    authorized(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    deauthorize(who: string, overrides?: CallOverrides): Promise<void>;

    isAuthorized(who: string, overrides?: CallOverrides): Promise<boolean>;

    isFrozen(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    setApprovalsFor(
      tokens: string[],
      spenders: string[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setIsFrozen(_newState: boolean, overrides?: CallOverrides): Promise<void>;

    setOwner(who: string, overrides?: CallOverrides): Promise<void>;

    zapIn(
      _info: {
        balancerPoolId: BytesLike;
        recipient: string;
        principalToken: string;
        minPtAmount: BigNumberish;
        deadline: BigNumberish;
        needsChildZap: boolean;
      },
      _zap: {
        curvePool: string;
        lpToken: string;
        amounts: BigNumberish[];
        roots: string[];
        parentIdx: BigNumberish;
        funcSig: BytesLike;
        minLpAmount: BigNumberish;
      },
      _childZap: {
        curvePool: string;
        lpToken: string;
        amounts: BigNumberish[];
        roots: string[];
        parentIdx: BigNumberish;
        funcSig: BytesLike;
        minLpAmount: BigNumberish;
      },
      _permitData: {
        tokenContract: string;
        spender: string;
        amount: BigNumberish;
        expiration: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        v: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    zapOut(
      _info: {
        balancerPoolId: BytesLike;
        principalToken: string;
        principalTokenAmount: BigNumberish;
        recipient: string;
        minBaseTokenAmount: BigNumberish;
        minRootTokenAmount: BigNumberish;
        deadline: BigNumberish;
        targetNeedsChildZap: boolean;
      },
      _zap: {
        curvePool: string;
        lpToken: string;
        rootTokenIdx: BigNumberish;
        rootToken: string;
        funcSig: BytesLike;
      },
      _childZap: {
        curvePool: string;
        lpToken: string;
        rootTokenIdx: BigNumberish;
        rootToken: string;
        funcSig: BytesLike;
      },
      _permitData: {
        tokenContract: string;
        spender: string;
        amount: BigNumberish;
        expiration: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        v: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    authorize(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    authorized(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    deauthorize(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAuthorized(who: string, overrides?: CallOverrides): Promise<BigNumber>;

    isFrozen(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setApprovalsFor(
      tokens: string[],
      spenders: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIsFrozen(
      _newState: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    zapIn(
      _info: {
        balancerPoolId: BytesLike;
        recipient: string;
        principalToken: string;
        minPtAmount: BigNumberish;
        deadline: BigNumberish;
        needsChildZap: boolean;
      },
      _zap: {
        curvePool: string;
        lpToken: string;
        amounts: BigNumberish[];
        roots: string[];
        parentIdx: BigNumberish;
        funcSig: BytesLike;
        minLpAmount: BigNumberish;
      },
      _childZap: {
        curvePool: string;
        lpToken: string;
        amounts: BigNumberish[];
        roots: string[];
        parentIdx: BigNumberish;
        funcSig: BytesLike;
        minLpAmount: BigNumberish;
      },
      _permitData: {
        tokenContract: string;
        spender: string;
        amount: BigNumberish;
        expiration: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        v: BigNumberish;
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    zapOut(
      _info: {
        balancerPoolId: BytesLike;
        principalToken: string;
        principalTokenAmount: BigNumberish;
        recipient: string;
        minBaseTokenAmount: BigNumberish;
        minRootTokenAmount: BigNumberish;
        deadline: BigNumberish;
        targetNeedsChildZap: boolean;
      },
      _zap: {
        curvePool: string;
        lpToken: string;
        rootTokenIdx: BigNumberish;
        rootToken: string;
        funcSig: BytesLike;
      },
      _childZap: {
        curvePool: string;
        lpToken: string;
        rootTokenIdx: BigNumberish;
        rootToken: string;
        funcSig: BytesLike;
      },
      _permitData: {
        tokenContract: string;
        spender: string;
        amount: BigNumberish;
        expiration: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        v: BigNumberish;
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    authorize(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    authorized(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deauthorize(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAuthorized(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFrozen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setApprovalsFor(
      tokens: string[],
      spenders: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIsFrozen(
      _newState: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    zapIn(
      _info: {
        balancerPoolId: BytesLike;
        recipient: string;
        principalToken: string;
        minPtAmount: BigNumberish;
        deadline: BigNumberish;
        needsChildZap: boolean;
      },
      _zap: {
        curvePool: string;
        lpToken: string;
        amounts: BigNumberish[];
        roots: string[];
        parentIdx: BigNumberish;
        funcSig: BytesLike;
        minLpAmount: BigNumberish;
      },
      _childZap: {
        curvePool: string;
        lpToken: string;
        amounts: BigNumberish[];
        roots: string[];
        parentIdx: BigNumberish;
        funcSig: BytesLike;
        minLpAmount: BigNumberish;
      },
      _permitData: {
        tokenContract: string;
        spender: string;
        amount: BigNumberish;
        expiration: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        v: BigNumberish;
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    zapOut(
      _info: {
        balancerPoolId: BytesLike;
        principalToken: string;
        principalTokenAmount: BigNumberish;
        recipient: string;
        minBaseTokenAmount: BigNumberish;
        minRootTokenAmount: BigNumberish;
        deadline: BigNumberish;
        targetNeedsChildZap: boolean;
      },
      _zap: {
        curvePool: string;
        lpToken: string;
        rootTokenIdx: BigNumberish;
        rootToken: string;
        funcSig: BytesLike;
      },
      _childZap: {
        curvePool: string;
        lpToken: string;
        rootTokenIdx: BigNumberish;
        rootToken: string;
        funcSig: BytesLike;
      },
      _permitData: {
        tokenContract: string;
        spender: string;
        amount: BigNumberish;
        expiration: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        v: BigNumberish;
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
